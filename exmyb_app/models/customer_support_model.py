from exmyb_app import db
from datetime import datetime
from exmyb_app.helper.enum_handler import ReportIssue


class CustomerSupports(db.Model):
    __tablename__ = 'customer_supports'

    id = db.Column(db.Integer, primary_key=True)
    # ticker_id will be generated by system Ex: "#EXMYB_TICKET_TIMESTAMT_id
    ticket_id = db.Column(db.String(225), nullable=False)
    title = db.Column(db.String(255), nullable=False)
    
    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'))
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))
    status = db.Column(db.String(255), default=ReportIssue.LOW.value)

    created_at = db.Column(db.DateTime, default=datetime.utcnow())
    updated_at = db.Column(db.DateTime, default=datetime.utcnow())
    created_by = db.Column(db.Integer)
    updated_by = db.Column(db.Integer)

    customer_comments = db.relationship('SupportComments', backref='customer_comment', lazy='dynamic')

    def save(self):
        db.session.add(self)
        db.session.commit()

    def delete(self):
        db.session.delete()
        db.session.commit()

    def to_json(self):
        not_convert_into_str = ['id', 'created_by', 'updated_by', 'project_id']
        return {col.name: (str(getattr(self, col.name)) if (
                    getattr(self, col.name) is not None and col.name not in not_convert_into_str) else getattr(self, col.name))
                for col in self.__table__.columns if col.name not in ['user_id','created_by', 'updated_by']}
    
    def generate_ticket_id(self, user_id):
        support_id = "#EXMYB-SUPPORT-"
        support_id += str(datetime.now().strftime("%Y%m%d%H%M%S"))
        support_id += "-"+str(user_id)
        return support_id
    
    @classmethod
    def find_by_ticket_id(cls,ticket_id):
        return cls.query.filter_by(ticket_id=ticket_id).first()

    @classmethod
    def find_by_status(cls,status):
        return cls.query.filter_by(status=status).all()